import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import { useEffect, useRef, useState } from 'react'
import axios from 'axios'

const Home = () => {
  const [search, setSearch] = useState();
  const [data, setData] = useState();

  useEffect(() => {
    let completed = false;
    if(!search) return;
    const fetchData = async () => {
      setSelected(0);
      const result = await axios.get(`/api/search?q=${search}`);
      if(completed) return;
      const { data } = result;
      const items = [];
      let count = 0;
      for(let e of data) {
        // if(count++ > 5) break;
        count++;
        items.push({no: count, ...e});
      }
      setData(items);
    }
    fetchData();
    return () => {
      completed = true;
    }
  }, [search]);

  const openPopup = (item) => {
    if(!item || !item.videoId) return;
    let childWindow = window.open(`https://youtu.be/${item.videoId}`, '', 'fullscreen');
    childWindow.addEventListener("load", () => {
      const childDocument = childWindow.document;
      const childBody = childDocument.body;
      childBody.style.backgroundColor = "red";
    })
  }

  const [selected, setSelected] = useState(0);
  const focusRef = useRef(), boxRef = useRef();
  const keypress = (e) => {
    const sc = selected;
    const keyCode = {
      down: 40,
      up: 38,
      enter: 13
    }
    if(!data) return;

    if(e.keyCode === keyCode.down) {
      if (selected + 1 > data.length) {
        handleFocus(1);
        setSelected(1);
      }
      else {
        handleFocus(sc + 1);
        setSelected(selected + 1);
      }
    }
    if(e.keyCode === keyCode.up) {
      if(selected - 1 <= 0) {
        handleFocus(data.length);
        setSelected(data.length);
      }
      else {
        handleFocus(sc - 1, false);
        setSelected(selected - 1);
      }
    }
    
    if(e.keyCode === keyCode.enter) {
      const sData = data[selected - 1];
      openPopup(sData);
    }
  }

  const [handleFocusCount, setHandleFocusCount] = useState(3);
  const handleFocus = (sc, isDown = true) => {
    if(!focusRef.current) return;

    if(!isDown && handleFocusCount > 1) setHandleFocusCount(handleFocusCount - 1);
    else setHandleFocusCount(4);

    const height = isDown ? sc - 4 : sc - handleFocusCount;
    boxRef.current.scrollTop = focusRef.current.offsetHeight * (height < 0 ? 0 : height);
  }

  return (
    <>
      <Head>
        <title>유튜브 노래방</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <input 
          className={styles.search} 
          type="text" 
          onChange={(e) => {
            setSearch(e.target.value);
          }} 
          onKeyDown={keypress}
          placeholder="검색어를 입력하세요"
        />
        {
          data && data.length > 0 && (
            <div className={styles.resultBox} ref={boxRef}>
              {
                data.map((item) => {
                  return (
                    <div 
                      className={`${styles.searchNode} ${selected === item.no ? styles.selected : ''}`}
                      key={item.no}
                      onClick={() => openPopup(item)}
                      ref={selected === item.no ? focusRef : null}
                    >
                      <p className={styles.searchTitle}>{item.title} - {item.artist}</p>
                      <p className={styles.searchConte}>https://youtu.be/{item.videoId}</p>
                    </div>
                  )
                })
              }
            </div>
          )
        }
      </main>
    </>
  )
}

export default Home;